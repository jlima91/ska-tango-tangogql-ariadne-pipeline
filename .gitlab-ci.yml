image: $SKA_K8S_TOOLS_BUILD_DEPLOY

variables:
  GIT_SUBMODULE_STRATEGY: recursive
  CHARTS_TO_PUBLISH: ska-tango-tangogql-ariadne
  MINIKUBE: false

cache:
  paths:
    - tangogql-ariadne
    - build

stages:
  - deploy-stfc
  - clone
  - lint
  - build
  - scan
  - push
  - test
  - join-reports
  - pages
  - publish

clone-repo:
  stage: clone
  tags:
    - k8srunner
  script:
    - export VERSION=$(make show-version)
    - echo "tangogql_ariadne_TEST_IMAGE=${CI_REGISTRY}/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}/ska-tango-tangogql-ariadne:${VERSION}-dev.c${CI_COMMIT_SHORT_SHA}" > build.env
    - rm -fR tangogql-ariadne
    - git clone https://gitlab.com/tango-controls/incubator/tangogql-ariadne.git
    - cd tangogql-ariadne/
    - cat $TRIGGER_PAYLOAD > payload.json
    - if [ -z $BRANCH ]; then git checkout $(jq -r '.checkout_sha | select( . != null )' payload.json); else git checkout $BRANCH; fi
  artifacts:
    paths:
        - tangogql-ariadne/
    reports:
      dotenv: build.env

install-tangogql-ariadne-chart:
  stage: deploy-stfc
  tags:
    - k8srunner
  when: manual
  variables:
    KUBE_NAMESPACE: "taranta-namespace"
  script:
    - make k8s-install-chart
    - make k8s-wait
  environment:
    name: tangogql-ariadne
    on_stop: uninstall-tangogql-ariadne-chart
    url: "https://k8s.stfc.skao.int/taranta-namespace/taranta"
    kubernetes:
      namespace: $KUBE_NAMESPACE

uninstall-tangogql-ariadne-chart:
  stage: deploy-stfc
  tags:
    - k8srunner
  when: manual
  variables:
    KUBE_NAMESPACE: "taranta-namespace"
  script:
    - make k8s-uninstall-chart
  environment:
    name: "tangogql-ariadne"
    action: stop
    url: "https://k8s.stfc.skao.int/taranta-namespace/taranta"
    kubernetes:
      namespace: $KUBE_NAMESPACE

python-lint:
  allow_failure: true
  after_script:
    - mv build/reports/linting-python.xml build/reports/linting.xml

python-test:
  stage: test
  image: ghcr.io/astral-sh/uv:python${PYTHON_VERSION}-bookworm
  parallel:
    matrix:
      - PYTHON_VERSION: ["3.10", "3.11", "3.12"]
  allow_failure: true
  before_script:
    - cd tangogql-ariadne/
    - ls -a
    - apt update
    - apt install -y jq $EXTRA_DEB_PACKAGES
    - python -m venv /tools
    - /tools/bin/python -m pip install wheel-inspect
    - export MODULE_NAME=$(/tools/bin/wheel2json dist/*.whl | jq -r .derived.modules[0])
    - pip install pytest-cov pytest-forked
    - pip install -e ".[tests]"
  script:
    - pytest --cov=$MODULE_NAME --cov-branch --cov-report term-missing --cov-report html --junitxml=report.xml $PYTEST_EXTRA_ARGS
  after_script:
    - ls -a
  coverage: '/^TOTAL.+?(\d+\%)$/'
  artifacts:
    when: always
    paths:
      - .
    reports:
      junit: report.xml


include:

# OCI Images
  # do a custom set of build and publish stages
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/oci-image.gitlab-ci.yml'

# Helm Charts
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/helm-chart.gitlab-ci.yml'

# changelog release page
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/changelog.gitlab-ci.yml'

# .post step finalisers eg: badges
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/finaliser.gitlab-ci.yml'

# Python packages lint
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/python-lint.gitlab-ci.yml'

# Python packages build
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/python-build.gitlab-ci.yml'

# Python packages publish
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/python-publish.gitlab-ci.yml'
